import logging
from telegram.ext import CommandHandler, MessageHandler, Filters, RegexHandler, ConversationHandler, Updater, run_async
from telegram import (ReplyKeyboardMarkup)
import dateparser
from datetime import datetime
import config
import db
from db import User, Note, Reminder, Category


updater = Updater(token=config.token)
dispatcher = updater.dispatcher
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
job = updater.job_queue


def build_menu(buttons,
               n_cols,
               header_buttons=None,
               footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


back_button = '–ù–∞–∑–∞–¥'

cancel_reply_markup = ReplyKeyboardMarkup(build_menu([back_button], n_cols=2),
                                          resize_keyboard=True)


def start(bot, update):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""

    session = db.session

    # —É–∑–Ω–∞–µ–º id —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.message.chat_id

    # —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    reply_keyboard = ['üìì –ó–∞–º–µ—Ç–∫–∏', '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
    main_reply_markup = ReplyKeyboardMarkup(build_menu(reply_keyboard, n_cols=1), resize_keyboard=True)

    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º –ø—É–Ω–∫—Ç:', reply_markup=main_reply_markup)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    chek_user_id = session.query(User).filter_by(id=user_id).one_or_none()

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
    if not chek_user_id:
        session.add(User(id=user_id))
        session.commit()

    return -1


def notes(bot, update):
    """–ú–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫"""

    reply_keyboard = ["–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"]
    reply_markup = ReplyKeyboardMarkup(build_menu(reply_keyboard, n_cols=2, footer_buttons=[back_button]),
                                       resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º –ø—É–Ω–∫—Ç:', reply_markup=reply_markup)

    return 'notes_menu'


def my_notes(bot, update):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏"""

    # —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫
    reply_keyboard = ["–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"]
    reply_markup = ReplyKeyboardMarkup(build_menu(reply_keyboard, n_cols=2, footer_buttons=[back_button]),
                                   resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º –ø—É–Ω–∫—Ç:', reply_markup=reply_markup)
    return 'add_or_del_notes'


def ask_category_for_notes(bot, update):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–º–µ—Ç–æ–∫"""

    session = db.session

    user_id = update.message.chat_id

    categories = ['–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏']
    search_categories = session.query(Category).filter_by(user_id=user_id)
    for row in search_categories:
        categories.append(row.name_of_category)

    reply_markup = ReplyKeyboardMarkup(build_menu(categories, n_cols=2, footer_buttons=[back_button]),
                                       resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=reply_markup)

    return 'ask_category_for_notes'


def display_notes(bot, update):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    session = db.session

    user_id = update.message.chat_id
    category = update.message.text

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category == '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        chosen_notes = session.query(Note).filter_by(user_id=user_id, category=None)

        # –µ—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç–≤–∏–∏
        if chosen_notes.count() == 0:
            update.message.reply_text('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç.')

            return notes(bot, update)

        # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω
        else:
            for note in chosen_notes:
                update.message.reply_text(f'{note.text}')

        return notes(bot, update)

    # —Ç–æ–∂–µ —Å–∞–º–æ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    else:
        notes_in_category = session.query(Category).filter_by(name_of_category=category, user_id=user_id)
        chosen_notes = session.query(Note).filter_by(user_id=user_id, category_id=notes_in_category[0].id)
        if chosen_notes.count() == 0:
            update.message.reply_text('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç.')

            return notes(bot, update)
        else:
            for note in chosen_notes:
                update.message.reply_text(f'{note.text}')

            return notes(bot, update)


def note_text(bot, update):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏"""

    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.", reply_markup=cancel_reply_markup)

    return 'add_note'


def add_note(bot, update):
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–¥"""

    session = db.session

    user_id = update.message.chat_id
    text = update.message.text

    session.add(Note(user_id=user_id, text=text))
    session.commit()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    created_categories = session.query(Category).filter_by(user_id=user_id).count()

    # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if created_categories == 0:
        update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        return start(bot, update)

    # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –≤—ã–±–æ—Ä–∞
    else:
        list_of_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]
        for cat in session.query(Category).filter_by(user_id=user_id):
            list_of_categories.append(cat.name_of_category)
        reply_markup = ReplyKeyboardMarkup(build_menu(list_of_categories, n_cols=2, footer_buttons=[back_button]),
                                           resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=reply_markup)

        return 'chose_category_for_note'


def add_category_for_note(bot, update):
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∑–∞–º–µ—Ç–∫–µ"""

    session = db.session

    user_id = update.message.chat_id
    category = update.message.text

    # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–º–µ—Ç–∫—É
    last_note = session.query(Note).filter_by(user_id=user_id)

    # –Ω–∞—Ö–æ–¥–∏–º id –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_search = session.query(Category).filter_by(name_of_category=category, user_id=user_id)
    category_id = category_search[0].id

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∑–∞–º–µ—Ç–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    last_note[-1].category_id = category_id
    session.dirty
    session.commit()

    update.message.reply_text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞.')
    return start(bot, update)


def select_note_to_delete(bot, update):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞"""

    session = db.session

    user_id = update.message.chat_id

    # –∏—â–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_notes = session.query(Note).filter_by(user_id=user_id)

    # –µ—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_notes.count() == 0:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç.")

        return notes(bot, update)

    # –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –µ—Å—Ç—å, —Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
    else:
        for note in user_notes:
            update.message.reply_text(f"id –∑–∞–º–µ—Ç–∫–∏: {note.id}.\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {note.category}.\n{note.text}")
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ id –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=cancel_reply_markup)

        return 'delete_note'


def delete_note(bot, update):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""

    session = db.session

    user_id = update.message.chat_id
    notes_id = update.message.text

    # —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if notes_id.isnumeric() is True:

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ id
        note_in_db = session.query(Note).filter_by(user_id=user_id, id=notes_id)

        # –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ id –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ
        if not note_in_db.one_or_none():
            update.message.reply_text("id –∑–∞–º–µ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ.")

            return select_note_to_delete(bot, update)
        else:
            session.delete(note_in_db[0])
            session.commit()
            update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

            return start(bot, update)
    else:
        update.message.reply_text("id –∑–∞–º–µ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ.")

        return select_note_to_delete(bot, update)


def user_categories_menu(bot, update):
    """–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    reply_keyboard = ['–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é']
    reply_markup = ReplyKeyboardMarkup(build_menu(reply_keyboard, n_cols=1, footer_buttons=[back_button]),
                                       resize_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç.', reply_markup=reply_markup)

    return 'categories_menu'


def display_users_categories(bot, update):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    session = db.session

    user_id = update.message.chat_id

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_categories = session.query(Category).filter_by(user_id=user_id)

    # –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    if user_categories.count() == 0:
        update.message.reply_text('–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.')

        return 'categories_menu'

    # –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        for category in user_categories:
            update.message.reply_text(category.name_of_category)

    return 'categories_menu'


def ask_category_name(bot, update):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', reply_markup=cancel_reply_markup)

    return 'add_category'


def add_category(bot, update):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""

    session = db.session

    user_id = update.message.chat_id
    name_of_category = update.message.text

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–¥
    user_categories = session.query(Category).filter_by(user_id=user_id)

    for category in user_categories:
        if category.name_of_category.lower() == name_of_category.lower():
            update.message.reply_text('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

            return 'categories_menu'

        else:
            continue

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–¥
    category = Category(name_of_category=name_of_category, user_id=user_id)
    session.add(category)
    session.commit()

    update.message.reply_text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.')

    return start(bot, update)


def ask_which_category_to_delete(bot, update):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""

    session = db.session

    user_id = update.message.chat_id

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_categories = session.query(Category).filter_by(user_id=user_id)

    # –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    if user_categories.count() == 0:
        update.message.reply_text('–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.')

        return 'categories_menu'

    # –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    else:
        categories = []
        for category in session.query(Category).filter_by(user_id=user_id):
            categories.append(category.name_of_category)

        reply_markup = ReplyKeyboardMarkup(build_menu(categories, n_cols=2, footer_buttons=[back_button]),
                                           resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', reply_markup=reply_markup)

    return 'delete_category'


def delete_category(bot, update):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    session = db.session

    user_id = update.message.chat_id
    name_of_category = update.message.text

    # –Ω–∞—Ö–æ–¥–∏–º id –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_search = session.query(Category).filter_by(name_of_category=name_of_category, user_id=user_id)
    category_id = category_search[0].id

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Å —É–¥–∞–ª—è–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    notes_from_deleting_category = session.query(Note).filter_by(category_id=category_id, user_id=user_id)
    if notes_from_deleting_category.count() != 0:
        for note in notes_from_deleting_category:
            note.category = None
            session.dirty
            session.commit()

    # —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    remove_category = session.query(Category).filter_by(name_of_category=name_of_category, user_id=user_id)
    session.delete(remove_category[0])
    session.commit()

    update.message.reply_text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')

    return start(bot, update)


def reminder_menu(bot, update):
    """–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""

    reply_keyboard = ['–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
    reply_markup = ReplyKeyboardMarkup(build_menu(reply_keyboard, n_cols=1, footer_buttons=[back_button]),
                                       resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç.', reply_markup=reply_markup)

    return 'reminder_menu'


def user_reminders(bot, update):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    session = db.session

    user_id = update.message.chat_id

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_user_reminders = session.query(Reminder).filter_by(user_id=user_id)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —Ç–æ —É–¥–∞–ª—è–µ–º
    for reminder in all_user_reminders:
        if reminder.date is None or reminder.time is None:
            session.delete(reminder)
            session.commit()

        if reminder.notification == 'sent':
            session.delete(reminder)
            session.commit()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if all_user_reminders.count() == 0:
        update.message.reply_text('–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')

        return reminder_menu(bot, update)

    # –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å—Ç—å, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω
    else:
        for reminder in all_user_reminders:
            update.message.reply_text(f'–î–∞—Ç–∞: {reminder.date}\n –í—Ä–µ–º—è: {reminder.time}\n '
                                      f'–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n {reminder.text}')

        return start(bot, update)


def new_reminder_date(bot, update):
    """–î–∞—Ç–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.', reply_markup=cancel_reply_markup)

    return 'add_date_for_reminder'


def add_date_for_reminder(bot, update):
    """–î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∫ –Ω–æ–≤–æ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é"""

    session = db.session

    user_id = update.message.chat_id

    date = update.message.text

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
    try:
        date_for_db = dateparser.parse(date).date()

    except AttributeError:

        update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.')

        return new_reminder_date(bot, update)

    else:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤–≤–µ–¥–µ–Ω–æ –ª–∏ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        if date_for_db < datetime.now().date():

            update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.')

            return new_reminder_date(bot, update)

        # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Å–µ –≤–µ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–¥
        else:
            session.add(Reminder(user_id=user_id, date=date_for_db))
            session.commit()

            update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú', reply_markup=cancel_reply_markup)

            return 'add_time_for_reminder'


def new_reminder_time(bot, update):
    """–£–∑–Ω–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö"""

    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú', reply_markup=cancel_reply_markup)

    return 'add_time_for_reminder'


def add_time_for_reminder(bot, update):
    """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

    session = db.session

    user_id = update.message.chat_id

    time = update.message.text
    date_now = str(datetime.now().date())
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã

    try:
        time_for_db = dateparser.parse(f"{date_now}, {time}").astimezone()

    except AttributeError:

        update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.')

        return new_reminder_time(bot, update)

    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Å–µ –≤–µ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–¥
    else:
        # –Ω–∞—Ö–æ–¥–∏–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
        all_user_reminders = session.query(Reminder).filter_by(user_id=user_id)
        all_user_reminders[-1].time = time_for_db

        session.dirty
        session.commit()

        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=cancel_reply_markup)

        return 'add_text_for_reminder'


def add_text_for_reminder(bot, update):
    """–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

    session = db.session

    user_id = update.message.chat_id

    text = update.message.text

    # –Ω–∞—Ö–æ–¥–∏–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    all_user_reminders = session.query(Reminder).filter_by(user_id=user_id)
    all_user_reminders[-1].notification = 'not_sent'
    all_user_reminders[-1].text = text

    session.dirty
    session.commit()

    update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

    return start(bot, update)


def select_reminder_to_delete(bot, update):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞"""

    session = db.session

    user_id = update.message.chat_id

    # –∏—â–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_reminders = session.query(Reminder).filter_by(user_id=user_id)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —Ç–æ —É–¥–∞–ª—è–µ–º
    for reminder in user_reminders:
        if reminder.date is None or reminder.time is None:
            session.delete(reminder)
            session.commit()

        if reminder.notification == 'sent':
            session.delete(reminder)
            session.commit()

    # –µ—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_reminders.count() == 0:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.")

        return reminder_menu(bot, update)

    # –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å—Ç—å, —Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
    else:
        for reminder in user_reminders:
            update.message.reply_text(f"id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder.id}.\n –î–∞—Ç–∞: {reminder.date}.\n"
                                      f"–í—Ä–µ–º—è: {reminder.time}.\n –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder.text}")
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", reply_markup=cancel_reply_markup)

        return 'delete_reminder'


def delete_reminder(bot, update):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""

    session = db.session

    user_id = update.message.chat_id
    reminder_id = update.message.text

    # —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if reminder_id.isnumeric() is True:

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ id
        reminder_in_db = session.query(Reminder).filter_by(user_id=user_id, id=reminder_id)

        # –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ id –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ
        if not reminder_in_db.one_or_none():
            update.message.reply_text("id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ.")

            return select_reminder_to_delete(bot, update)
        else:
            session.delete(reminder_in_db[0])
            session.commit()
            update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

            return start(bot, update)
    else:
        update.message.reply_text("id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ.")

        return select_reminder_to_delete(bot, update)


@run_async
def send_reminder(bot, job):
    """–†–µ–≥—É–ª—è–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""

    session = db.session

    date = datetime.now().date()

    time = datetime.now().time()

    reminders = session.query(Reminder)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —Ç–æ —É–¥–∞–ª—è–µ–º
    for reminder in reminders:

        if reminder.date is None or reminder.time is None:
            session.delete(reminder)
            session.commit()

        # —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if reminder.notification == 'sent':
            session.delete(reminder)
            session.commit()

        # —É–∑–Ω–∞–µ–º –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if reminder.date.strftime('%Y, %m, %d') == date.strftime('%Y, %m, %d'):

            if reminder.time.strftime('%H, %M') == time.strftime('%H, %M'):
                bot.send_message(chat_id=reminder.user_id, text=f'–î–∞—Ç–∞: {reminder.date}\n '
                f'–í—Ä–µ–º—è: {reminder.time}\n –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n {reminder.text}')

                reminder.notification = 'sent'
                session.dirty
                session.commit()

            else:
                continue

        else:
            continue


notes_menu_global = ConversationHandler(
    entry_points=[RegexHandler('üìì –ó–∞–º–µ—Ç–∫–∏', notes)],
    states={
        'notes_menu': [RegexHandler(back_button, start),
                       RegexHandler('–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏', my_notes),
                       RegexHandler('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', user_categories_menu)],
        'add_or_del_notes': [RegexHandler(back_button, notes),
                             RegexHandler('–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏', ask_category_for_notes),
                             RegexHandler('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', note_text),
                             RegexHandler('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', select_note_to_delete)],
        'ask_category_for_notes': [RegexHandler(back_button, notes),
                                   MessageHandler(Filters.all, display_notes)],
        'add_note': [RegexHandler(back_button, start),
                     MessageHandler(Filters.all, add_note)],
        'chose_category_for_note': [RegexHandler(back_button, start),
                                    MessageHandler(Filters.all, add_category_for_note)],
        'delete_note': [RegexHandler(back_button, start),
                        MessageHandler(Filters.all, delete_note)],
        'categories_menu': [RegexHandler(back_button, notes),
                            RegexHandler('–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', display_users_categories),
                            RegexHandler('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', ask_category_name),
                            RegexHandler('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', ask_which_category_to_delete)],
        'add_category': [RegexHandler(back_button, user_categories_menu),
                         MessageHandler(Filters.all, add_category)],
        'add_time_for_reminder': [RegexHandler(back_button, user_categories_menu),
                                  MessageHandler(Filters.all, add_time_for_reminder)],
        'delete_category': [RegexHandler(back_button, user_categories_menu),
                            MessageHandler(Filters.all, delete_category)]
    },
    fallbacks=[RegexHandler(back_button, start)]
)

reminders_menu_global = ConversationHandler(
    entry_points=[RegexHandler('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', reminder_menu)],
    states={
        'reminder_menu': [RegexHandler(back_button, start),
                          RegexHandler('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', new_reminder_date),
                          RegexHandler('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', select_reminder_to_delete),
                          RegexHandler('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', user_reminders)],
        'add_date_for_reminder': [RegexHandler(back_button, reminder_menu),
                                  MessageHandler(Filters.all, add_date_for_reminder)],
        'add_time_for_reminder': [RegexHandler(back_button, reminder_menu),
                                  MessageHandler(Filters.all, add_time_for_reminder)],
        'add_text_for_reminder': [RegexHandler(back_button, reminder_menu),
                                  MessageHandler(Filters.all, add_text_for_reminder)],
        'delete_reminder': [RegexHandler(back_button, reminder_menu),
                            MessageHandler(Filters.all, delete_reminder)]
    },
    fallbacks=[RegexHandler(back_button, start)]
)

job_send_notification = job.run_repeating(send_reminder, interval=60)

dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(notes_menu_global)
dispatcher.add_handler(reminders_menu_global)
updater.start_polling()